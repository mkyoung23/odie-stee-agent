# LifeLapse App Full Automation Task

Odie Stee, here is your end-to-end mission. Complete each step and update yourself/code as needed. Only alert me if you are completely finished or truly stuck.

1. Open Firebase Console and ensure the project "lifelapse-27e17" has:
    - Firestore (database)
    - Storage (for videos/images)
    - Authentication (Email, Google, Apple)
    - Remote Config enabled

2. Use Gemini or ChatGPT API/browser to:
    - Generate & apply Firestore and Storage security rules for production
    - Generate and insert schema/default docs for Users, Groups, Videos collections
    - Generate and implement backend logic for user registration, group management, video upload, AI captions/tags (using Gemini/Vertex AI)
    - Enable Vertex AI and integrate Gemini for all AI features

3. In FlutterFlow (or Flutter IDE):
    - Create & connect all UI screens: onboarding, authentication, home, video feed/player, group creation/join, favorites, capsule seal (timer/lock), notifications, profile/settings
    - Integrate AI video caption/tagging features using Remote Config

4. Generate and insert production-ready Flutter/Dart code for:
    - Firestore, Storage, Auth, Remote Config integration
    - Gemini/Vertex AI API calls for video captions/tags
    - All missing UI/business logic

5. Build the app for all platforms:
    - Run `flutter build apk` for Android
    - Run `flutter build ios` for iOS (archive/export for TestFlight)
    - Run `flutter build web` and deploy to Firebase Hosting

6. Distribute builds:
    - Android: Upload to Play Console Internal Testing or generate/share APK link
    - iOS: Upload to App Store Connect/TestFlight and generate invite link
    - Web: Deploy and share hosting URL

7. Test the app:
    - Run automated and manual tests for all core flows on all platforms
    - If anything fails, get code fixes from Gemini/ChatGPT, update code, retry

8. Save all generated code, configs, rules, and documentation to "firebase_setup_notes.txt" on Desktop

9. Commit and push all changes to GitHub for backup

10. Only alert me when everything is done and provide direct download/install/share links for all platforms

# If you get stuck or fail, debug using Gemini/ChatGPT and keep retrying/fixing until the app is fully functional, downloadable, and testable by users.


